We find a pcap file in the root folder:

level02@SnowCrash:~$ ls
level02.pcap

We realize this file is network capture package which could contain usefull information. For it, we've created a usefull script to read the file with tshark cli tool.

First we have to scp the file to our host machine:
scp -P 4242 level02@<VirtualMachine-ip>:/home/user/level02/level02.pcap level02.pcap

After it we just have to run the script passing the copied pcap file as an argument:

➜  resources git:(main) ✗ sudo ./run.sh level02.pcap
[+] Building 0.5s (7/7) FINISHED                                                                                                               docker:default
 => [internal] load build definition from Dockerfile                                                                                                     0.0s
 => => transferring dockerfile: 105B                                                                                                                     0.0s
 => [internal] load metadata for docker.io/library/alpine:latest                                                                                         0.4s
 => [internal] load .dockerignore                                                                                                                        0.0s
 => => transferring context: 2B                                                                                                                          0.0s
 => [1/3] FROM docker.io/library/alpine:latest@sha256:a8560b36e8b8210634f77d9f7f9efd7ffa463e380b75e2e74aff4511df3ef88c                                   0.0s
 => CACHED [2/3] WORKDIR /data                                                                                                                           0.0s
 => CACHED [3/3] RUN apk add --no-cache tshark xxd                                                                                                       0.0s
 => exporting to image                                                                                                                                   0.0s
 => => exporting layers                                                                                                                                  0.0s
 => => writing image sha256:4ccd923ba776128cc1e0535ff651b306d551973ab078f8299fd554469c23226e                                                             0.0s
 => => naming to docker.io/library/tshark_xxd_alpine                                                                                                     0.0s
00000000: fffd 25ff fc25 fffb 26ff fd18 fffd 20ff  ..%..%..&..... .
00000010: fd23 fffd 27ff fd24 fffe 26ff fb18 fffb  .#..'..$..&.....
00000020: 20ff fb23 fffb 27ff fc24 fffa 2001 fff0   ..#..'..$.. ...
00000030: fffa 2301 fff0 fffa 2701 fff0 fffa 1801  ..#.....'.......
00000040: fff0 fffa 2000 3338 3430 302c 3338 3430  .... .38400,3840
00000050: 30ff f0ff fa23 0053 6f64 6143 616e 3a30  0....#.SodaCan:0
00000060: fff0 fffa 2700 0044 4953 504c 4159 0153  ....'..DISPLAY.S
00000070: 6f64 6143 616e 3a30 fff0 fffa 1800 7874  odaCan:0......xt
00000080: 6572 6dff f0ff fb03 fffd 01ff fd22 fffd  erm.........."..
00000090: 1fff fb05 fffd 21ff fd03 fffc 01ff fb22  ......!........"
000000a0: fffa 2203 0100 0003 6203 0402 0f05 0000  ..".....b.......
000000b0: 0762 1c08 0204 0942 1a0a 027f 0b02 150f  .b.....B........
000000c0: 0211 1002 1311 02ff ff12 02ff ffff f0ff  ................
000000d0: fb1f fffa 1f00 b100 31ff f0ff fd05 fffb  ........1.......
000000e0: 21ff fa22 0103 fff0 fffa 2201 07ff f0ff  !.."......".....
000000f0: fa21 03ff f0ff fb01 fffd 00ff fe22 fffd  .!..........."..
00000100: 01ff fb00 fffc 22ff fa22 0303 e203 0482  ......".."......
00000110: 0f07 e21c 0882 0409 c21a 0a82 7f0b 8215  ................
00000120: 0f82 1110 8213 1182 ffff 1282 ffff fff0  ................
00000130: 0d0a 4c69 6e75 7820 322e 362e 3338 2d38  ..Linux 2.6.38-8
00000140: 2d67 656e 6572 6963 2d70 6165 2028 3a3a  -generic-pae (::
00000150: 6666 6666 3a31 302e 312e 312e 3229 2028  ffff:10.1.1.2) (
00000160: 7074 732f 3130 290d 0a0a 0100 7777 7762  pts/10).....wwwb
00000170: 7567 7320 6c6f 6769 6e3a 206c 006c 6500  ugs login: l.le.
00000180: 6576 0076 6500 656c 006c 5800 580d 0100  ev.ve.el.lX.X...
00000190: 0d0a 5061 7373 776f 7264 3a20 6674 5f77  ..Password: ft_w
000001a0: 616e 6472 7f7f 7f4e 4452 656c 7f4c 304c  andr...NDRel.L0L
000001b0: 0d00 0d0a 0100 0d0a 4c6f 6769 6e20 696e  ........Login in
000001c0: 636f 7272 6563 740d 0a77 7777 6275 6773  correct..wwwbugs
000001d0: 206c 6f67 696e 3a20                       login: 


We realize there seem to be a password hidden in the pcap trace, probably a plain password sent over unencrypted http:
ft_wandr...NDRel.L0L

The dots in hex are 7f, which represent the delete (DEL) character

If we remove characters before the dots (.) the password become:

ft_waNDReL0L

We try the password with flag02 user and run getflag command:

level02@SnowCrash:~$ su flag02
Password:
Don't forget to launch getflag !
flag02@SnowCrash:~$ getflag
Check flag.Here is your token : kooda2puivaav1idi4f57q8iq

